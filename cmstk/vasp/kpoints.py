from cmstk.base import BaseFile


class KpointsFile(BaseFile):
    """File wrapper for a VASP KPOINTS file.
    
    Notes:
        This wrapper only supports the `Monkhorst-Pack` style of mesh 
        generation.

    Args:
        filepath (optional) (str): Filepath to a KPOINTS file.
    """

    def __init__(self, filepath="KPOINTS"):
        super().__init__(filepath)
        self._comment = "Automatically generated by cmstk."
        self._n_kpoints = 0
        self._mesh_type = "Monkhorst-Pack"
        self._mesh_size = (5, 5, 5)
        self._mesh_shift = (0, 0, 0)

    def read(self, path=None):
        """Reads a KPOINTS file.
        
        Args:
            path (optional) (str): Filepath to read.

        Returns:
            None
        """
        if path is None:
            path = self.filepath
        with open(path, "r") as f:
            lines = f.readlines()
        self.comment = lines[0].strip()
        self.n_kpoints = int(lines[1])
        self.mesh_type = lines[2].strip()
        self.mesh_size = tuple([int(l) for l in lines[3].split()])
        self.mesh_shift = tuple([int(l) for l in lines[4].split()])

    def write(self, path=None):
        """Writes a KPOINTS file.
        
        Args:
            path (optional) (str): Filepath to write.
    
        Returns:
            None
        """
        if path is None:
            path = self.filepath
        with open(path, "w") as f:
            for s in [self.comment, self.n_kpoints, self.mesh_type]:
                f.write("{}\n".format(s))
            for s in [self.mesh_size, self.mesh_shift]:
                f.write("{} {} {}\n".format(*s))

    @property
    def comment(self):
        """(str): Top line file descriptor."""
        return self._comment

    @comment.setter
    def comment(self, value):
        if type(value) is not str:
            raise TypeError()
        self._comment = value

    @property
    def n_kpoints(self):
        """(int): Number of K-Points."""
        return self._n_kpoints

    @n_kpoints.setter
    def n_kpoints(self, value):
        if type(value) is not int:
            raise TypeError()
        self._n_kpoints = value

    @property
    def mesh_type(self):
        """(str): Mesh generation scheme."""
        return self._mesh_type

    @mesh_type.setter
    def mesh_type(self, value):
        if type(value) is not str:
            raise TypeError()
        self._mesh_type = value

    @property
    def mesh_size(self):
        """(iterable of int): Size of the K-Point mesh in 3D."""
        return self._mesh_size

    @mesh_size.setter
    def mesh_size(self, value):
        for v in value:
            if type(v) is not int:
                raise TypeError()
        self._mesh_size = value

    @property
    def mesh_shift(self):
        """(iterable of int): Shift of the K-Point mesh in 3D."""
        return self._mesh_shift

    @mesh_shift.setter
    def mesh_shift(self, value):
        for v in value:
            if type(v) is not int:
                raise TypeError()
        self._mesh_shift = value
