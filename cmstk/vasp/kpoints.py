from cmstk.util import BaseFile
from typing import Optional, Tuple


class KpointsFile(BaseFile):
    """File wrapper for a VASP KPOINTS file.

    Args:
        filepath: Filepath to a KPOINTS file.
        comment: Top line file descriptor.
        n_kpoints: Number of K-Points.
        mesh_shift: Shift of the K-Point mesh in 3D.
        mesh_size: Size of the K-Point mesh in 3D.
        mesh_type: Mesh generation scheme.

    Attributes:
        filepath: Filepath to a KPOINTS file.
        comment: Top line file descriptor.
        n_kpoints: Number of K-Points.
        mesh_shift: Shift of the K-Point mesh in 3D.
        mesh_size: Size of the K-Point mesh in 3D.
        mesh_type: Mesh generation scheme.
    """

    def __init__(self,
                 filepath: Optional[str] = None,
                 comment: Optional[str] = None,
                 n_kpoints: Optional[int] = None,
                 mesh_shift: Optional[Tuple[int, int, int]] = None,
                 mesh_size: Optional[Tuple[int, int, int]] = None,
                 mesh_type: Optional[str] = None) -> None:
        if filepath is None:
            filepath = "KPOINTS"
        if comment is None:
            comment = "Automatically generated by cmstk."
        self._comment = comment
        if n_kpoints is None:
            n_kpoints = 0
        self._n_kpoints = n_kpoints
        if mesh_shift is None:
            mesh_shift = (0, 0, 0)
        self._mesh_shift = mesh_shift
        if mesh_size is None:
            mesh_size = (5, 5, 5)
        self._mesh_size = mesh_size
        if mesh_type is None:
            mesh_type = "Monkhorst-Pack"
        self._mesh_type = mesh_type
        attrs = [
            "_comment", "_n_kpoints", "_mesh_shift", "_mesh_size", "_mesh_type"
        ]
        super().__init__(attrs, filepath)

    @property
    def comment(self) -> str:
        if self._comment is None:
            self._comment = self._lines[0]
        return self._comment

    @comment.setter
    def comment(self, value: str) -> None:
        self._comment = value

    @property
    def n_kpoints(self) -> int:
        if self._n_kpoints is None:
            self._n_kpoints = int(self._lines[1])
        return self._n_kpoints

    @n_kpoints.setter
    def n_kpoints(self, value: int) -> None:
        self._n_kpoints = value

    @property
    def mesh_shift(self) -> Tuple[int, int, int]:
        if self._mesh_shift is None:
            shift = self._lines[4].split()
            self._mesh_shift = tuple(map(int, [shift[0], shift[1], shift[2]]))
        return self._mesh_shift

    @mesh_shift.setter
    def mesh_shift(self, value: Tuple[int, int, int]) -> None:
        self._mesh_shift = value

    @property
    def mesh_size(self) -> Tuple[int, int, int]:
        if self._mesh_size is None:
            size = self._lines[3].split()
            self._mesh_size = tuple(map(int, [size[0], size[1], size[2]]))
        return self._mesh_size

    @mesh_size.setter
    def mesh_size(self, value: Tuple[int, int, int]) -> None:
        self._mesh_size = value

    @property
    def mesh_type(self) -> str:
        if self._mesh_type is None:
            self._mesh_type = self._lines[2]
        return self._mesh_type

    @mesh_type.setter
    def mesh_type(self, value: str) -> None:
        self._mesh_type = value

    def write(self, path: Optional[str] = None) -> None:
        """Writes a KPOINTS file.
        
        Args:
            path: The filepath to write to.
        """
        if path is None:
            path = self.filepath
        with open(path, "w") as f:
            for s in [self.comment, self.n_kpoints, self.mesh_type]:
                f.write("{}\n".format(s))
            for s in [self.mesh_size, self.mesh_shift]:
                f.write("{} {} {}\n".format(*s))
