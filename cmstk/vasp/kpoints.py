from typing import Optional, Sequence


class KpointsFile(object):
    """File wrapper for a VASP KPOINTS file.
    
    Notes:
        This wrapper only supports the `Monkhorst-Pack` style of mesh 
        generation.

    Args:
        filepath (optional) (str): Filepath to a KPOINTS file.

    Attributes:
        filepath (str): Filepath to a KPOINTS file.
        comment (str): Top line file descriptor.
        n_kpoints (int): Number of K-Points.
        mesh_type (str): Mesh generation scheme.
        mesh_size (sequence of int): Size of the K-Point mesh in 3D.
        mesh_shift (sequence of int): Shift of the K-Point mesh in 3D.
    """

    def __init__(self, filepath: Optional[str] = None) -> None:
        if filepath is None:
            filepath = "KPOINTS"
        self.filepath = filepath
        self.comment: str = "Automatically generated by cmstk."
        self.n_kpoints: int = 0
        self.mesh_type: str = "Monkhorst-Pack"
        self.mesh_size: Sequence[int] = (5, 5, 5)
        self.mesh_shift: Sequence[int] = (0, 0, 0)

    def read(self, path: Optional[str] = None) -> None:
        """Reads a KPOINTS file.
        
        Args:
            path (optional) (str): The filepath to read from.

        Returns:
            None
        """
        if path is None:
            path = self.filepath
        with open(path, "r") as f:
            lines = f.readlines()
        self.comment = lines[0].strip()
        self.n_kpoints = int(lines[1])
        self.mesh_type = lines[2].strip()
        self.mesh_size = tuple([int(l) for l in lines[3].split()])
        self.mesh_shift = tuple([int(l) for l in lines[4].split()])

    def write(self, path: Optional[str] = None) -> None:
        """Writes a KPOINTS file.
        
        Args:
            path (optional) (str): The filepath to write to.
    
        Returns:
            None
        """
        if path is None:
            path = self.filepath
        with open(path, "w") as f:
            for s in [self.comment, self.n_kpoints, self.mesh_type]:
                f.write("{}\n".format(s))
            for s in [self.mesh_size, self.mesh_shift]:
                f.write("{} {} {}\n".format(*s))
