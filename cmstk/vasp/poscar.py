from cmstk.crystallography import Atom, Lattice
import numpy as np
from typing import Sequence, Optional


class PoscarFile(object):
    """File wrapper for a VASP POSCAR file.
    
    Notes:
        File specification:
        https://cms.mpi.univie.ac.at/vasp/vasp/POSCAR_file.html

    Args:
        filepath: Filepath to a POSCAR file.
        comment: Comment line at the top of the file.
        direct: Specifies a direct coordinate system.
        lattice: Underlying lattice structure.
        n_atoms_per_symbol: Number of atoms of each type.
        relaxations: Selective dynamics relaxation parameters for each atom.
        scaling_factor: Lattice scaling factor (lattice constant)
        total_volume: Total volume of the system
        - * VASP requires this number to be negative to distinguish it from the 
          scaling factor.
    
    Attributes:
        filepath: Filepath to a POSCAR file.
        comment: Comment line at the top of the file.
        direct: Specifies a direct coordinate system.
        lattice: Underlying lattice structure.
        n_atoms_per_symbol: Number of atoms of each type.
        relaxations: Selective dynamics relaxation parameters for each atom.
        scaling_factor: Lattice scaling factor (lattice constant)
        total_volume: Total volume of the system
    """

    def __init__(self, filepath: Optional[str] = None,
                 comment: Optional[str] = None,
                 direct: Optional[bool] = None,
                 lattice: Optional[Lattice] = None,
                 n_atoms_per_symbol: Optional[Sequence[int]] = None,
                 relaxations: Optional[np.ndarray] = None,
                 scaling_factor: Optional[float] = None,
                 total_volume: Optional[float] = None) -> None:
        if filepath is None:
            filepath = "POSCAR"
        self.filepath = filepath
        if comment is None:
            comment = "Automatically generated by cmstk."
        self.comment = comment
        if direct is None:
            direct = True
        self.direct = direct
        if lattice is None:
            lattice = Lattice()
        self.lattice = lattice
        if n_atoms_per_symbol is None:
            n_atoms_per_symbol = []
        self.n_atoms_per_symbol = n_atoms_per_symbol
        if relaxations is None:
            relaxations = np.array([], dtype=bool)
        self.relaxations = relaxations
        if scaling_factor is None:
            scaling_factor = 1.0
        self.scaling_factor = scaling_factor
        # rarely used; check for existence in write.
        # overrides position of scaling_factor if exists.
        self.total_volume = total_volume

    def read(self, path: Optional[str] = None) -> None:
        """Reads a POSCAR file.
        
        Args:
            path: The filepath to read from.

        Returns:
            None
        """
        if path is None:
            path = self.filepath
        with open(path, "r") as f:
            lines = f.readlines()
        self.comment = lines[0].strip()
        constant_or_volume = float(lines[1].strip())
        if constant_or_volume > 0:
            self.scaling_factor = constant_or_volume
        else:
            self.total_volume = constant_or_volume
        lattice_vectors = lines[2:5]
        lattice_vectors = [
            np.fromstring(l, sep=" ") for l in lattice_vectors
        ]
        self.lattice_vectors = np.array(lattice_vectors)
        n_atoms_per_symbol = [int(n) for n in lines[5].split()]
        self.n_atoms_per_symbol = tuple(n_atoms_per_symbol)
        if lines[6][0] in ["S", "s"]:
            selective_dynamics = True
        else:
            selective_dynamics = False
        if selective_dynamics:
            coord_sys_index = 7
        else:
            coord_sys_index = 6
        coordinate_system = lines[coord_sys_index].strip()
        if coordinate_system[0] in ["c", "C", "k", "K"]:
            self.direct = False
        else:
            self.direct = True
        positions = lines[coord_sys_index+1:]
        positions = [" ".join(p.split()[:3]) for p in positions]
        positions = [
            np.fromstring(p, sep=" ") for p in positions
        ]
        for p in positions:
            if self.direct:
                a = Atom(position_direct=p)
            else:
                a = Atom(position_cartesian=p)    
            self.lattice.add_atom(a)
        if selective_dynamics:
            relaxations = lines[coord_sys_index+1:]
            relaxations = [" ".join(r.split()[3:]) for r in relaxations]
            relaxations = [
                np.fromstring(r, sep=" ", dtype=bool) for r in relaxations
            ]
            self.relaxations = np.array(relaxations)

    def write(self, path: Optional[str] = None) -> None:
        """Writes a POSCAR file.
        
        Args:
            path: Filepath to write to.

        Returns:
            None
        """
        if path is None:
            path = self.filepath
        with open(path, "w") as f:
            f.write("{}\n".format(self.comment))
            if self.total_volume is None:
                f.write("{}\n".format(self.scaling_factor))
            else:
                f.write("{}\n".format(self.total_volume))
            for row in self.lattice.axes:
                row = row.astype(str)
                row = " ".join(row)
                f.write("{}\n".format(row))
            n_atoms_per_symbol = " ".join(map(str, self.n_atoms_per_symbol))
            f.write("{}\n".format(n_atoms_per_symbol))
            if self.relaxations.size != 0:
                f.write("Selective dynamics\n")
            if self.direct:
                f.write("Direct\n")
                positions = self.lattice.positions_direct
            else:
                f.write("Cartesian\n")
                positions = self.lattice.positions_cartesian
            for row in positions:
                row = row.astype(str)
                row = " ".join(row)
                f.write("{}\n".format(row))
