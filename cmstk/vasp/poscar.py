from cmstk.base import BaseFile
import numpy as np


class PoscarFile(BaseFile):
    """File wrapper for a VASP POSCAR file.
    
    Notes:
        File specification:
        https://cms.mpi.univie.ac.at/vasp/vasp/POSCAR_file.html
    
    Args:
        filepath (optional) (str): Filepath to a POSCAR file.
    """

    def __init__(self, filepath="POSCAR"):
        super().__init__(filepath)
        self._comment = "Automatically generated by cmstk."
        self._lattice_parameter = None
        self._total_volume = None
        self._lattice_vectors = None
        self._n_atoms_per_species = None
        self._selective_dynamics = False
        self._coordinate_system = "Cartesian"
        self._positions = None
        self._relaxations = None
    
    def read(self, path=None):
        """Reads a POSCAR file.
        
        Args:
            path (optional) (str): Filepath to read.

        Returns:
            None
        """
        if path is None:
            path = self.filepath
        with open(path, "r") as f:
            lines = f.readlines()
        self.comment = lines[0].strip()
        scaling_factor = float(lines[1].strip())
        if scaling_factor > 0:
            self.lattice_parameter = scaling_factor
        else:
            self.total_volume = scaling_factor
        vectors = []
        for line in lines[2:5]:
            row = list(map(float, line.split()))
            vectors.append(row)
        self.lattice_vectors = np.array(vectors)
        self.n_atoms_per_species = list(map(int, lines[5].split()))
        if lines[6].lower().strip().startswith("s"):
            self.selective_dynamics = True
        if self.selective_dynamics:
            coord_sys_line = 7
        else:
            coord_sys_line = 6
        self.coordinate_system = lines[coord_sys_line].strip()
        pos_line = coord_sys_line + 1
        positions = []
        relaxations = []
        for line in lines[pos_line:]:
            position = list(map(float, [p for p in line.split()[:3]]))
            positions.append(position)
            if self.selective_dynamics:
                relax = [r for r in line.split()[3:]]
                for i, r in enumerate(relax):
                    if r == "T":
                        relax[i] = True
                    else:
                        relax[i] = False
                relaxations.append(relax)
        self.positions = np.array(positions)
        self.relaxations = np.array(relaxations, dtype=bool)

    def write(self, path=None):
        """Writes a POSCAR file.
        
        Args:
            path (optional) (str): Filepath to write.

        Returns:
            None
        """
        if path is None:
            path = self.filepath
        with open(path, "w") as f:
            f.write("{}\n".format(self.comment))
            if self.lattice_parameter is None:
                f.write("{}\n".format(self.total_volume))
            else:
                f.write("{}\n".format(self.lattice_parameter))
            for vector in self.lattice_vectors:
                vector_str = " ".join(vector.astype(str))
                f.write("{}\n".format(vector_str))
            f.write("{}\n".format(" ".join(map(str, self.n_atoms_per_species))))
            if self.selective_dynamics:
                f.write("selective dynamics\n")
            f.write("{}\n".format(self.coordinate_system))
            for i, position in enumerate(self.positions):
                position_str = " ".join(position.astype(str))
                f.write(position_str)
                if self.selective_dynamics:
                    relax = []
                    for r in self.relaxations[i]:
                        if r:
                            relax.append("T")
                        else:
                            relax.append("F")
                    relax_str = " ".join(relax)
                    f.write(relax_str)
                f.write("\n")

    @property
    def comment(self):
        """(str): Comment line at the top of the file."""
        return self._comment

    @comment.setter
    def comment(self, value):
        if type(value) is not str:
            raise TypeError()
        self._comment = value

    @property
    def lattice_parameter(self):
        """(float): Universal scaling parameter."""
        return self._lattice_parameter

    @lattice_parameter.setter
    def lattice_parameter(self, value):
        if type(value) not in [float, type(None)]:
            raise TypeError()
        if type(value) is float and value < 0:
            raise ValueError()
        self._lattice_parameter = value

    @property
    def total_volume(self):
        """(float): Total volume of the cell."""
        return self._total_volume

    @total_volume.setter
    def total_volume(self, value):
        if type(value) not in [float, type(None)]:
            raise TypeError()
        if type(value) is float and value > 0:
            raise ValueError()
        self._total_volume = value

    @property
    def lattice_vectors(self):
        """(numpy.ndarray): Basis set of the cell."""
        return self._lattice_vectors

    @lattice_vectors.setter
    def lattice_vectors(self, value):
        if type(value) is not np.ndarray:
            raise ValueError()
        self._lattice_vectors = value

    @property
    def n_atoms_per_species(self):
        """(iterable of int): Number of atoms of each species."""
        return self._n_atoms_per_species

    @n_atoms_per_species.setter
    def n_atoms_per_species(self, value):
        for v in value:
            if type(v) is not int:
                raise TypeError()
        self._n_atoms_per_species = value

    @property
    def selective_dynamics(self):
        """(bool): Selective dynamics flag."""
        return self._selective_dynamics

    @selective_dynamics.setter
    def selective_dynamics(self, value):
        if type(value) is not bool:
            raise TypeError()
        self._selective_dynamics = value

    @property
    def coordinate_system(self):
        """(str): Type of coordinate system positions are represented in."""
        return self._coordinate_system

    @coordinate_system.setter
    def coordinate_system(self, value):
        valid_chars = ["c", "C", "d", "D", "k", "K"]
        if value[0] not in valid_chars:
            raise ValueError()
        self._coordinate_system = value

    @property
    def positions(self):
        """(numpy.ndarray): Positions of all atoms in the cell."""
        return self._positions

    @positions.setter
    def positions(self, value):
        if type(value) is not np.ndarray:
            raise TypeError()
        self._positions = value

    @property
    def relaxations(self):
        """(numpy.ndarray): Boolean array representing relaxation options for 
        each atom in each direction."""
        return self._relaxations

    @relaxations.setter
    def relaxations(self, value):
        if type(value) is not np.ndarray:
            raise TypeError()
        if value.dtype != bool:
            raise ValueError()
        self._relaxations = value
